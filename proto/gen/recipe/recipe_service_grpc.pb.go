// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/recipe/recipe_service.proto

package recipe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecipeService_RecipeList_FullMethodName   = "/recipe.RecipeService/RecipeList"
	RecipeService_RecipeByID_FullMethodName   = "/recipe.RecipeService/RecipeByID"
	RecipeService_RecipeCreate_FullMethodName = "/recipe.RecipeService/RecipeCreate"
	RecipeService_RecipeUpdate_FullMethodName = "/recipe.RecipeService/RecipeUpdate"
	RecipeService_RecipeDelete_FullMethodName = "/recipe.RecipeService/RecipeDelete"
	RecipeService_RecipeExists_FullMethodName = "/recipe.RecipeService/RecipeExists"
)

// RecipeServiceClient is the client API for RecipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeServiceClient interface {
	RecipeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecipeListResponse, error)
	RecipeByID(ctx context.Context, in *RecipeByIDRequest, opts ...grpc.CallOption) (*RecipeByIDResponse, error)
	RecipeCreate(ctx context.Context, in *RecipeCreateRequest, opts ...grpc.CallOption) (*RecipeCreateResponse, error)
	RecipeUpdate(ctx context.Context, in *RecipeUpdateRequest, opts ...grpc.CallOption) (*RecipeUpdateResponse, error)
	RecipeDelete(ctx context.Context, in *RecipeDeleteRequest, opts ...grpc.CallOption) (*RecipeDeleteResponse, error)
	RecipeExists(ctx context.Context, in *RecipeExistsRequest, opts ...grpc.CallOption) (*RecipeExistsResponse, error)
}

type recipeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeServiceClient(cc grpc.ClientConnInterface) RecipeServiceClient {
	return &recipeServiceClient{cc}
}

func (c *recipeServiceClient) RecipeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecipeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeListResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) RecipeByID(ctx context.Context, in *RecipeByIDRequest, opts ...grpc.CallOption) (*RecipeByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeByIDResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) RecipeCreate(ctx context.Context, in *RecipeCreateRequest, opts ...grpc.CallOption) (*RecipeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeCreateResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) RecipeUpdate(ctx context.Context, in *RecipeUpdateRequest, opts ...grpc.CallOption) (*RecipeUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeUpdateResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) RecipeDelete(ctx context.Context, in *RecipeDeleteRequest, opts ...grpc.CallOption) (*RecipeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeDeleteResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeServiceClient) RecipeExists(ctx context.Context, in *RecipeExistsRequest, opts ...grpc.CallOption) (*RecipeExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeExistsResponse)
	err := c.cc.Invoke(ctx, RecipeService_RecipeExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeServiceServer is the server API for RecipeService service.
// All implementations must embed UnimplementedRecipeServiceServer
// for forward compatibility.
type RecipeServiceServer interface {
	RecipeList(context.Context, *Empty) (*RecipeListResponse, error)
	RecipeByID(context.Context, *RecipeByIDRequest) (*RecipeByIDResponse, error)
	RecipeCreate(context.Context, *RecipeCreateRequest) (*RecipeCreateResponse, error)
	RecipeUpdate(context.Context, *RecipeUpdateRequest) (*RecipeUpdateResponse, error)
	RecipeDelete(context.Context, *RecipeDeleteRequest) (*RecipeDeleteResponse, error)
	RecipeExists(context.Context, *RecipeExistsRequest) (*RecipeExistsResponse, error)
	mustEmbedUnimplementedRecipeServiceServer()
}

// UnimplementedRecipeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipeServiceServer struct{}

func (UnimplementedRecipeServiceServer) RecipeList(context.Context, *Empty) (*RecipeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeList not implemented")
}
func (UnimplementedRecipeServiceServer) RecipeByID(context.Context, *RecipeByIDRequest) (*RecipeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeByID not implemented")
}
func (UnimplementedRecipeServiceServer) RecipeCreate(context.Context, *RecipeCreateRequest) (*RecipeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeCreate not implemented")
}
func (UnimplementedRecipeServiceServer) RecipeUpdate(context.Context, *RecipeUpdateRequest) (*RecipeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeUpdate not implemented")
}
func (UnimplementedRecipeServiceServer) RecipeDelete(context.Context, *RecipeDeleteRequest) (*RecipeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeDelete not implemented")
}
func (UnimplementedRecipeServiceServer) RecipeExists(context.Context, *RecipeExistsRequest) (*RecipeExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipeExists not implemented")
}
func (UnimplementedRecipeServiceServer) mustEmbedUnimplementedRecipeServiceServer() {}
func (UnimplementedRecipeServiceServer) testEmbeddedByValue()                       {}

// UnsafeRecipeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeServiceServer will
// result in compilation errors.
type UnsafeRecipeServiceServer interface {
	mustEmbedUnimplementedRecipeServiceServer()
}

func RegisterRecipeServiceServer(s grpc.ServiceRegistrar, srv RecipeServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipeService_ServiceDesc, srv)
}

func _RecipeService_RecipeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_RecipeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeByID(ctx, req.(*RecipeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_RecipeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeCreate(ctx, req.(*RecipeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_RecipeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeUpdate(ctx, req.(*RecipeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_RecipeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeDelete(ctx, req.(*RecipeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeService_RecipeExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServiceServer).RecipeExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeService_RecipeExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServiceServer).RecipeExists(ctx, req.(*RecipeExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipeService_ServiceDesc is the grpc.ServiceDesc for RecipeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recipe.RecipeService",
	HandlerType: (*RecipeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecipeList",
			Handler:    _RecipeService_RecipeList_Handler,
		},
		{
			MethodName: "RecipeByID",
			Handler:    _RecipeService_RecipeByID_Handler,
		},
		{
			MethodName: "RecipeCreate",
			Handler:    _RecipeService_RecipeCreate_Handler,
		},
		{
			MethodName: "RecipeUpdate",
			Handler:    _RecipeService_RecipeUpdate_Handler,
		},
		{
			MethodName: "RecipeDelete",
			Handler:    _RecipeService_RecipeDelete_Handler,
		},
		{
			MethodName: "RecipeExists",
			Handler:    _RecipeService_RecipeExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/recipe/recipe_service.proto",
}
